package org.ayakaji.probe;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.zip.DataFormatException;
import java.util.zip.Inflater;

import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;

public class CBEProber {
	private static final char[] qryBalBinMsg = { 0x00, 0x00, 0x03, 0x50, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x03, 0x35, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x06, 0x41, 0x63, 0x63, 0x53, 0x72, 0x76, 0x00, 0x00, 0x00, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
			0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x0b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x41, 0x43,
			0x54, 0x4f, 0x52, 0x46, 0x4c, 0x41, 0x47, 0x00, 0x00, 0x00, 0x10, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
			0x41, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x6c, 0x61, 0x67, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x49,
			0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x49, 0x44, 0x00, 0x00, 0x00, 0x05, 0x6d, 0x65,
			0x6e, 0x75, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43,
			0x48, 0x41, 0x49, 0x4e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x54, 0x52,
			0x41, 0x43, 0x45, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x00, 0x00, 0x00, 0x03, 0x4f, 0x46, 0x46, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x4d, 0x65, 0x6e, 0x75, 0x00, 0x00, 0x00, 0x05, 0x6d, 0x65, 0x6e,
			0x75, 0x49, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x00, 0x00,
			0x00, 0x03, 0x35, 0x33, 0x33, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x4f, 0x70, 0x65, 0x72, 0x61,
			0x74, 0x65, 0x72, 0x49, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x74,
			0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x00, 0x00, 0x00, 0x20, 0x30, 0x31,
			0x36, 0x66, 0x31, 0x62, 0x63, 0x65, 0x33, 0x39, 0x31, 0x66, 0x30, 0x30, 0x30, 0x31, 0x61, 0x38, 0x37, 0x62,
			0x65, 0x61, 0x38, 0x34, 0x64, 0x30, 0x61, 0x31, 0x39, 0x30, 0x37, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x00, 0x00,
			0x00, 0x08, 0x62, 0x73, 0x61, 0x63, 0x4e, 0x47, 0x4b, 0x46, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b,
			0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x08, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x52, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x43, 0x49, 0x4e, 0x54, 0x45,
			0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x4f, 0x50, 0x45, 0x52, 0x49,
			0x44, 0x00, 0x00, 0x00, 0x10, 0x63, 0x62, 0x73, 0x61, 0x63, 0x4e, 0x47, 0x4b, 0x46, 0x30, 0x31, 0x38, 0x35,
			0x35, 0x37, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x52, 0x43, 0x4b, 0x5f, 0x4e, 0x50, 0x55,
			0x53, 0x45, 0x52, 0x54, 0x59, 0x50, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
			0x07, 0x24, 0x24, 0x43, 0x4c, 0x49, 0x4e, 0x46, 0x00, 0x00, 0x00, 0x14, 0x38, 0x35, 0x35, 0x37, 0x36, 0x40,
			0x74, 0x73, 0x74, 0x33, 0x2d, 0x64, 0x64, 0x73, 0x2d, 0x31, 0x30, 0x32, 0x40, 0x53, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x43, 0x54, 0x61, 0x67, 0x53, 0x65, 0x74, 0x00, 0x00, 0x00,
			0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x71, 0x72, 0x79, 0x6f, 0x69,
			0x64, 0x00, 0x00, 0x00, 0x0d, 0x35, 0x33, 0x33, 0x38, 0x30, 0x32, 0x38, 0x32, 0x35, 0x38, 0x37, 0x35, 0x34,
			0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x6f, 0x69, 0x64, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00,
			0x01, 0x31, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0c, 0x69, 0x73, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74,
			0x64, 0x65, 0x62, 0x74, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x73,
			0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x03, 0x41, 0x6c, 0x6c, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65,
			0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x64, 0x65, 0x74, 0x61, 0x69,
			0x6c, 0x6f, 0x72, 0x73, 0x75, 0x6d, 0x00, 0x00, 0x00, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x00, 0x00,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x64, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x74, 0x69, 0x6d, 0x65,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x65, 0x6e, 0x64, 0x74, 0x69, 0x6d,
			0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x6a, 0x75, 0x64, 0x67, 0x65,
			0x74, 0x72, 0x61, 0x6e, 0x73, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00,
			0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x63, 0x75, 0x72, 0x73, 0x70, 0x65,
			0x63, 0x69, 0x61, 0x6c, 0x66, 0x65, 0x65, 0x00, 0x00, 0x00, 0x01, 0x30 };

	/**
	 * [包月量查询]
	 * 
	 * @param jsonData
	 * @return
	 */
	public static String byl(String jsonData) {
		if (jsonData == null || jsonData.equals(""))
			return "{\"ERROR\" : \"The message is empty!\"}";
		JSONObject jsonObj = null;
		try {
			jsonObj = JSONObject.parseObject(jsonData);
			if (jsonObj == null)
				return "{\"ERROR\" : \"The message format is incorrect!\"}";
		} catch (JSONException e) {
			return Toolkit.getJSONString("The message format is incorrect!", e);
		}
		if (!jsonObj.containsKey("HOST") || !jsonObj.containsKey("PORT") || !jsonObj.containsKey("USERID")
				|| !jsonObj.containsKey("BILL_MON")) {
			return "{\"ERROR\" : \"The parameters include at least HOST (host name or IP), PORT (port number), USERID (user ID), and BILL_MON (account period)!\"}";
		}
		Socket sock = Toolkit.openSocket(jsonObj.getString("HOST"), jsonObj.getIntValue("PORT"));
		if (sock == null)
			return "{\"ERROR\" : \"Failed to create socket!\"}";
		OutputStream os = Toolkit.getOutputStream(sock);
		if (os == null) {
			Toolkit.closeSocket(sock);
			return "{\"ERROR\" : \"Failed to get output stream!\"}";
		}
		PrintWriter pw = new PrintWriter(os);
		pw.print("64  01000                 " + jsonObj.getString("BILL_MON") + jsonObj.getString("USERID")
				+ "       ALL       ");
		pw.flush();
		Toolkit.shutdownOutput(sock);
		InputStream is = Toolkit.getInputStream(sock);
		InputStreamReader isr = new InputStreamReader(is);
		BufferedReader br = new BufferedReader(isr);
		String info = "";
		String temp = null;
		try {
			while ((temp = br.readLine()) != null) {
				info += temp;
			}
		} catch (IOException e) {
			return Toolkit.getJSONString("I/O Exceptions", e);
		}
		try {
			br.close();
			isr.close();
			is.close();
			pw.close();
		} catch (IOException e) {
			return Toolkit.getJSONString("I/O Exceptions", e);
		}
		Toolkit.closeSocket(sock);
		if (info.indexOf("GPRS") != -1)
			return "{\"STATUS\" : \"SUCCESS\", \"DETAIL\" : \"" + info + "\"}";
		else
			return "{\"STATUS\" : \"FAILURE\", \"DETAIL\" : \"" + info + "\"}";
	}
	
	/**
	 * [余额查询]
	 * @param json
	 * @return
	 */
	public static String bal(String json) {
		JSONObject jsonObj = Toolkit.validate(json, new String[] { "HOST", "PORT", "USERID" });
		if (jsonObj == null)
			return "{\"ERROR\" : \"Request body convert to JSON object failure.\"}";
		String host = jsonObj.getString("HOST");
		int port = jsonObj.getIntValue("PORT");
		String userId = jsonObj.getString("USERID");
		Socket sock = null;
		try {
			sock = new Socket(host, port);
		} catch (IOException e) {
			return "{\"ERROR\" : \"Cannot establish connection with " + host + ":" + port + ".\"}";
		}
		OutputStream os = Toolkit.getOutputStream(sock);
		if (os == null)
			return "{\"ERROR\" : \"Cannot get output stream from socket.\"}";

		// Replace the binary message with region and account id
		char[] chrReg = userId.substring(0, 3).toCharArray();
		char[] chrAct = userId.toCharArray();
		for (int i = 0; i < chrReg.length; i++) {
			qryBalBinMsg[17 + i] = chrReg[i];
			qryBalBinMsg[248 + i] = chrReg[i];
		}
		for (int i = 0; i < chrAct.length; i++) {
			qryBalBinMsg[593 + i] = chrAct[i];
		}
		// Write binary message to output stream
		PrintWriter pw = new PrintWriter(os);
		pw.print(qryBalBinMsg);
		pw.flush();
		// shutdown output stream
		Toolkit.shutdownOutput(sock);

		InputStream is = Toolkit.getInputStream(sock);
		if (is == null)
			return "{\"ERROR\" : \"Cannot get input stream from socket.\"}";
		BufferedInputStream bis = new BufferedInputStream(is);
		byte[] buff = new byte[100000];
		int len = 0;
		int realLen = 0;
		byte[] bytCmprsFlg = "COMPRESS".getBytes();
		int flgLen = bytCmprsFlg.length;
		int offset = flgLen + 14;
		try {
			while ((len = bis.read(buff)) != -1) {
				realLen = len;
			}
		} catch (IOException e) {
			Toolkit.close(bis);
			pw.close();
			Toolkit.closeSocket(sock);
			return "{\"ERROR\" : \"Cannot get result.\"}";
		}
		int ilen = 60000;
		byte[] strBuf = new byte[ilen];
		int dataLen = ilen;
		Inflater decompresser = new Inflater();
		decompresser.setInput(buff, offset, realLen - offset);
		try {
			decompresser.inflate(strBuf);
		} catch (DataFormatException e) {
			Toolkit.close(bis);
			pw.close();
			Toolkit.closeSocket(sock);
			return "{\"ERROR\" : \"Decompress return buffer failure.\"}";
		}
		decompresser.end();
		Toolkit.close(bis);
		pw.close();
		Toolkit.closeSocket(sock);
		String result = new String(strBuf, 0, dataLen).replaceAll("[^\\w]+", "");
		if (result.indexOf("success") != -1) {
			return "{\"STATUS\" : \"SUCCESS\", \"DETAIL\" : \"" + result + "\"}";
		} else {
			return "{\"STATUS\" : \"FAILURE\", \"DETAIL\" : \"" + result + "\"}";
		}
	}
}
